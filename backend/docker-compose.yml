version: '3.9'

volumes:
  kong_data: { }
  users_data: { }
  vehicles_data: { }
  chargerpoints_data: { }
  recharges_data: { }

networks: #Red interna para comunicar los servicios (“Services on the same network can communicate with each other using their name”)
  kong-net:
  users-net:

services:
  kong-database:
    image: postgres:9.6
    container_name: kong-postgres
    restart: on-failure
    ports:
      - "5432:5432"
    networks:
      - kong-net
    volumes:
      - kong_data:/var/lib/postgresql/data
    environment:
      POSTGRES_USER: kong
      POSTGRES_PASSWORD: ${KONG_PG_PASSWORD:-kong}
      POSTGRES_DB: kong
    healthcheck:
      test: [ "CMD", "pg_isready", "-U", "kong" ]
      interval: 30s
      timeout: 30s
      retries: 3
  kong-migration:
    image: ${KONG_DOCKER_TAG:-kong:latest}
    command: kong migrations bootstrap
    networks:
      - kong-net
    restart: on-failure
    environment:
      KONG_DATABASE: postgres
      KONG_PG_DATABASE: kong
      KONG_PG_HOST: kong-database
      KONG_PG_PASSWORD: ${KONG_PG_PASSWORD:-kong}
      KONG_PG_USER: kong
    depends_on:
      kong-database:
        condition: service_healthy
  kong:
    image: ${KONG_DOCKER_TAG:-kong:latest}
    restart: on-failure
    networks:
      - kong-net
    environment:
      KONG_DATABASE: postgres
      KONG_PG_HOST: kong-database
      KONG_PG_DATABASE: kong
      KONG_PG_USER: kong
      KONG_PG_PASSWORD: ${KONG_PG_PASSWORD:-kong}
      KOING_PROXY_LISTEN: 0.0.0.0:8000,
      KONG_PROXY_LISTEN_SSL: 0.0.0.0:8443
      KONG_ADMIN_LISTEN: 0.0.0.0:8001
    depends_on:
      kong-database:
        condition: service_healthy
    healthcheck:
      test: [ "CMD", "kong", "health" ]
      interval: 10s
      timeout: 10s
      retries: 10
    ports:
      - "8000:8000"
      - "8001:8001"
      - "8443:8443"
      - "8444:8444"
  konga-prepare:
    image: pantsel/konga:latest
    command: "-c prepare -a postgres -u postgresqpl://kong:${KONG_PG_PASSWORD:-kong}@kong-database:5432/konga"
    networks:
      - kong-net
    restart: on-failure
    depends_on:
      kong-database:
        condition: service_healthy
  konga:
    image: pantsel/konga:latest
    restart: always
    networks:
      - kong-net
    environment:
      DB_ADAPTER: postgres
      DB_URI: postgresqpl://kong:${KONG_PG_PASSWORD:-kong}@kong-database:5432/konga
      NODE_ENV: production
    depends_on:
      kong-database:
        condition: service_healthy
    ports:
      - "8092:1337"
  auth-api:
    image: auth-api-image
    build:
      context: ./auth-service
      dockerfile: ./Dockerfile
    restart: unless-stopped
    ports:
      - "8081:8081"
    networks:
      - kong-net
    environment:
      KEY_ID: fBdjldKzV3GPjI5sAC7pggruybNkSMMu
      SECRET: QWIKEJQKWJEKQWJKQJEWKEQJWK
      PORT: 8081
      USER_API_URL: http://users-api:8080/users
    depends_on:
      - users-api
  users-api:
    image: users-api-image
    build:
      context: ./user-service
      dockerfile: ./user-service/Dockerfile
    restart: unless-stopped
    ports:
      - "8082:8080"
    networks:
      - kong-net
      - users-net
    environment:
      SPRING_DATASOURCE_URL: jdbc:mysql://users-database:3306/charlie-users?createDatabaseIfNotExist=true
      SPRING_DATASOURCE_USERNAME: charlie
      SPRING_DATASOURCE_PASSWORD: charlie
      USER_API_URL: http://users-api:8080
      VEHICLES_API_URL: http://vehicles-api:8080
      CHARGERPOINTS_API_URL: http://chargerpoints-api:8080
    depends_on:
      users-database:
        condition: service_healthy
  vehicles-api:
    image: vehicles-api-image
    build:
      context: ./vehicles-service
      dockerfile: ./vehicles-service/Dockerfile
    restart: unless-stopped
    ports:
      - "8083:8080"
    networks:
      - kong-net
    environment:
      SPRING_DATASOURCE_URL: jdbc:mysql://vehicles-database:3306/charlie-vehicles?createDatabaseIfNotExist=true
      SPRING_DATASOURCE_USERNAME: charlie
      SPRING_DATASOURCE_PASSWORD: charlie
      USER_API_URL: http://users-api:8080
      VEHICLES_API_URL: http://vehicles-api:8080
      CHARGERPOINTS_API_URL: http://chargerpoints-api:8080
    depends_on:
      vehicles-database:
        condition: service_healthy
  chargerpoints-api:
    image: chargerpoints-api-image
    build:
      context: ./chargerpoints-service
      dockerfile: ./chargerpoints-service/Dockerfile
    restart: unless-stopped
    ports:
      - "8088:8080"
    networks: # Networks to join
      - kong-net
    environment:
      SPRING_DATASOURCE_URL: jdbc:mysql://chargerpoints-database:3306/charlie-points?createDatabaseIfNotExist=true
      SPRING_DATASOURCE_USERNAME: charlie
      SPRING_DATASOURCE_PASSWORD: charlie
    depends_on:
      chargerpoints-database:
        condition: service_healthy
  recharges-api:
    image: recharges-api-image
    build:
      context: ./recharges-service
      dockerfile: ./Dockerfile
    restart: unless-stopped
    ports:
      - "8090:3000"
    networks:
      - kong-net
    environment:
      USER_API_URL: http://users-api:8080/users
      VEHICLES_API_URL: http://vehicles-api:8080/vehicles
      CHARGERPOINTS_API_URL: http://chargerpoints-api:8080/chargerpoints
      LENTA_PRICE: "0.13"
      MEDIA_PRICE: "0.20"
      RAPIDA_PRICE: "0.35"
      ULTRARAPIDA_PRICE: "0.50"
      db: "recharges-database"
      db_user: "charlie"
      db_password: "charlie"
      db_schema: "charlie_recharges"
    depends_on:
      chargerpoints-database:
        condition: service_healthy
  angular-app:
    image: angular-app-image
    build:
      context: ../frontend
      dockerfile: ../frontend/Dockerfile
    restart: unless-stopped
    ports:
      - "4200:80"
    networks:
      - kong-net
  #    environment:
  #      USER_API_URL: "http://localhost:8000/api/users"
  #      VEHICLES_API_URL: "http://localhost:8000/api/vehicles"
  #      CHARGERPOINTS_API_URL: "http://localhost:8000/api/chargerpoints"
  #      LOGIN_API_URL: "http://localhost:8080/api/auth"
  users-database:
    image: mysql #Usamos imagen del respositorio ya creada
    hostname: users-database
    cap_add:
      - SYS_NICE
    restart: always
    ports:
      - "3334:3306"
    networks:
      - users-net
    volumes:
      - users_data:/var/lib/mysql
    environment:
      MYSQL_ROOT_PASSWORD: charlie-data-admin
      MYSQL_PASSWORD: charlie
      MYSQL_USER: charlie
      MYSQL_DATABASE: charlie-users
      MYSQL_ROOT_HOST: '%'
    healthcheck:
      test: [ "CMD", "mysqladmin" ,"ping", "-h", "localhost" ]
      interval: 30s
      timeout: 10s
      retries: 5
  vehicles-database:
    image: mysql
    hostname: vehicles-database
    cap_add:
      - SYS_NICE
    restart: always
    ports:
      - "3335:3306"
    networks:
      - kong-net
    volumes:
      - vehicles_data:/var/lib/mysql
    environment:
      MYSQL_ROOT_PASSWORD: charlie-data-admin
      MYSQL_PASSWORD: charlie
      MYSQL_USER: charlie
      MYSQL_DATABASE: charlie-vehicles
      MYSQL_ROOT_HOST: '%'
    healthcheck:
      test: [ "CMD", "mysqladmin" ,"ping", "-h", "localhost" ]
      interval: 30s
      timeout: 10s
      retries: 5
  chargerpoints-database:
    image: mysql
    hostname: chargerpoints-database
    cap_add:
      - SYS_NICE
    restart: always
    ports:
      - "3333:3306"
    networks:
      - kong-net
    volumes:
      - chargerpoints_data:/var/lib/mysql
    environment:
      MYSQL_ROOT_PASSWORD: charlie-data-admin
      MYSQL_PASSWORD: charlie
      MYSQL_DATABASE: charlie-points
      MYSQL_USER: charlie
      MYSQL_ROOT_HOST: '%'
    healthcheck:
      test: [ "CMD", "mysqladmin" ,"ping", "-h", "localhost" ]
      interval: 30s
      timeout: 10s
      retries: 5
  recharges-database:
    image: mysql
    hostname: recharges-database
    cap_add:
      - SYS_NICE
    restart: always
    ports:
      - "3336:3306"
    networks:
      - kong-net
    volumes:
      - recharges_data:/var/lib/mysql
    environment:
      MYSQL_ROOT_PASSWORD: charlie-data-admin
      MYSQL_PASSWORD: charlie
      MYSQL_DATABASE: charlie_recharges
      MYSQL_USER: charlie
      MYSQL_ROOT_HOST: '%'
    healthcheck:
      test: [ "CMD", "mysqladmin" ,"ping", "-h", "localhost" ]
      interval: 30s
      timeout: 10s
      retries: 5